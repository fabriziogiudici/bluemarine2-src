/*
 * #%L
 * *********************************************************************************************************************
 *
 * blueMarine2 - Semantic Media Center
 * http://bluemarine2.tidalwave.it - hg clone https://bitbucket.org/tidalwave/bluemarine2-src
 * %%
 * Copyright (C) 2015 - 2015 Tidalwave s.a.s. (http://tidalwave.it)
 * %%
 *
 * *********************************************************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * *********************************************************************************************************************
 *
 * $Id$
 *
 * *********************************************************************************************************************
 * #L%
 */
package it.tidalwave.util;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import javax.annotation.concurrent.ThreadSafe;
import java.util.List;
import java.util.Scanner;
import java.io.IOException;

/***********************************************************************************************************************
 *
 * @author  Fabrizio Giudici
 * @version $Id$
 *
 **********************************************************************************************************************/
@ThreadSafe
public interface ProcessExecutor
  {
    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    public static interface ConsoleOutput
      {
        public static interface Listener
          {
            public void onReceived (@Nonnull String string);   
          }
        
        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        public boolean latestLineMatches (@Nonnull String regexp);

        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        @Nonnull
        public Scanner filteredAndSplitBy (@Nonnull String filterRegexp, @Nonnull String delimiterRegexp);

        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        @Nonnull
        public List<String> filteredBy (@Nonnull String filter);

        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        @Nonnull
        public ConsoleOutput waitFor (@Nonnull String regexp)
          throws InterruptedException, IOException;

        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        public void clear();
    
        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        public void setListener (@Nonnull Listener listener);

        /***************************************************************************************************************
         *
         *
         **************************************************************************************************************/
        @CheckForNull
        public Listener getListener();
    }

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ProcessExecutor withArguments (@Nonnull String ... arguments);
    
    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ProcessExecutor withArgument (@Nonnull String argument);

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ProcessExecutor start()
      throws IOException;

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    public void stop();

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ProcessExecutor waitForCompletion()
      throws IOException, InterruptedException;

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ProcessExecutor send (@Nonnull String string)
      throws IOException;

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ConsoleOutput getStdout();

    /*******************************************************************************************************************
     *
     *
     ******************************************************************************************************************/
    @Nonnull
    public ConsoleOutput getStderr();
  }

